def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


// def runConfigurationScript() {

//   def environmentVariables = []

//   if (project.hasProperty('dart-defines')) {

//     environmentVariables = project.property('dart-defines').split(',').collectEntries { entry ->

//         def pair = new String(entry.decodeBase64(), 'UTF-8').split('=') 
//         [(pair.first()): pair.last()]

//     }

//   }

//   exec {

//     commandLine 'sh', '../../scrips/configure_project_android.sh', "${environmentVariables.FLAVOR}"

//   }

// }


// afterEvaluate {

//   runConfigurationScript()

// }

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.vivas.sdl"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21 
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        ndk {
            debugSymbolLevel 'FULL'
        }
    }

    signingConfigs {
        release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true

            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions "app"

    productFlavors {
        dev {
            dimension "app"
            resValue "string", "app_name", "DEV Du lịch nông nghiệp Hà Nội"
            applicationId "com.vivas.sdl.dev"
        }
        staging {
            dimension "app"
            resValue "string", "app_name", "STAG Du lịch nông nghiệp Hà Nội"
            applicationId "com.vivas.sdl.stag"
        }
        production {
            dimension "app"
            resValue "string", "app_name", "Du lịch nông nghiệp Hà Nội"
            applicationId "com.vivas.sdl"
        }
    }

    packagingOptions {
        // pickFirst 'META-INF/atomicfu.kotlin_module'
        // pickFirst 'META-INF/proguard/coroutines.pro'
        // pickFirst 'lib/x86/libc++_shared.so'
        // pickFirst 'lib/x86_64/libc++_shared.so'
        // pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        // pickFirst 'lib/arm64-v8a/libc++_shared.so'
        // pickFirst '**/libc++_shared.so'
        // pickFirst '**/libfbjni.so'
        // pickFirst 'lib/arm64-v8a/libtensorflowlite_jni.so'
        // pickFirst 'lib/armeabi-v7a/libtensorflowlite_jni.so'
        // pickFirst 'lib/x86/libtensorflowlite_jni.so'
        // pickFirst 'lib/x86_64/libtensorflowlite_jni.so'
        // exclude 'META-INF/LICENSE.txt'
        // exclude 'META-INF/NOTICE.txt'
        // exclude 'META-INF/LICENSE'
        // exclude 'META-INF/NOTICE'
        // exclude 'META-INF/DEPENDENCIES'
        // exclude("META-INF/*")
        dex {
            useLegacyPackaging true
        }


    }
    // minifyEnabled true
    // shrinkResources true
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
